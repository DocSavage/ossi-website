---
import "../../styles/tailwind.css";

import { getCollection, getEntries } from "astro:content";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

import BaseLayout from "../../layouts/BaseLayout.astro";
import Hero from "../../components/Hero.astro";
import ToggleFilterMenuBtn from "../../components/projects/ToggleFilterMenuBtn.jsx";
import FilterMenu from "../../components/projects/FilterMenu.jsx";
import ProjectCard from "../../components/projects/ProjectCard.jsx";

import { extractUniqueTags } from "../../utils/tagManipulation.js";
import { getRandomImagePath } from "../../utils/getRandomImagePath.js";

const baseUrl = import.meta.env.BASE_URL;

const pageTitle = "OSSI-supported projects";
const allEcosystems = await getCollection("ecosystems");
const allRelatedProjects = await Promise.all(
  allEcosystems.flatMap(async (ecosystem) => {
    const relatedProjects = await getEntries(
      ecosystem.data["related projects"]
    );
    return relatedProjects;
  })
);
const flattenedRelatedProjects = [].concat(...allRelatedProjects);
const uniqueTags = extractUniqueTags(flattenedRelatedProjects);

const placeholderImages = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/images/default-project-images/*.{jpeg,jpg,png,gif}"
);
getRandomImagePath(placeholderImages);
---

<BaseLayout pageTitle={pageTitle}>
  <Hero>
    <Fragment slot="title">Ecosystems</Fragment>
    <Fragment slot="subtitle">
      Tagline describing what "ecosystems" are
    </Fragment>
  </Hero>
  <section class="px-6 md:py-12 lg:py-20 mx-auto max-w-6xl">
    <div class="flex py-6 md:p-0">
      <ToggleFilterMenuBtn client:load />
    </div>
    <section class="md:grid grid-cols-3 gap-4">
      <FilterMenu client:load key="FilterMenu" uniqueTags={uniqueTags} />
      <section
        class="col-start-2 col-span-2 md:grid grid-cols-2 auto-rows-max md:gap-4"
      >
        {
          allEcosystems.map((ecosystem, index) => {
            const tagsArray = [].concat(
              ...Object.values(extractUniqueTags(allRelatedProjects[index]))
            );
            return (
              <ProjectCard
                client:load
                key={ecosystem.slug}
                url={`${baseUrl}/ecosystems/${ecosystem.slug}/`}
                title={ecosystem.data.title}
                authors={ecosystem.data["author names"]}
                tagline={ecosystem.data.tagline}
                tagsArray={tagsArray}
              >
                {ecosystem.image ? (
                  <Image
                    slot="image"
                    src={ecosystem.data["image file"]}
                    alt={ecosystem.data["image alt text"]}
                    class="w-full h-40 object-cover object-center  bg-gray-400 dark:bg-slate-700"
                    loading="eager"
                  />
                ) : (
                  <Image
                    slot="image"
                    src={placeholderImages[
                      getRandomImagePath(placeholderImages)
                    ]()}
                    alt="Generic image of software or computing technology"
                    class="w-full h-40 object-cover object-center"
                    loading="eager"
                  />
                )}
              </ProjectCard>
            );
          })
        }
      </section>
    </section>
  </section>
</BaseLayout>
